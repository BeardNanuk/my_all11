#!/usr/bin/env python

## (obspy) jiazeh@farm:~/inversion_test$ vi zauto_results 
## automated results generation in PPT slides

## created by Jiaze He, ad textplot 
#Fri Sep  7 14:59:33 UTC 2018 

## revised on Mon Dec 24 20:29:46 UTC 2018 
## compatible with parallalized zplot_signals_main_paral.py 


import argparse, os, sys 
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec

# textwrap for plotting text
import textwrap

# generating PPT slides
from pptx import Presentation
from pptx.util import Inches


from seisflows.config import config, loadpy, tilde_expand, Dict
from seisflows.tools import unix

import datetime
import pickle
import glob
from shutil import copyfile

import prusct.io.read_data as rd
from my_sfs.ze_plot_section import getargs,textplot,add_slide_ze
from my_sfs.ze_plot_section import plot_seismo_su, seismofold_src

from multiprocessing import Process, current_process





if __name__ == "__main__":
    ### workflow submission script
    args = getargs()
    execfile('zfuncfolder/zconstants.py') 
    print('NT:', PAR.NT)
    # register parameters
    parameters = loadpy(args.parameter_file)
    sys.modules['seisflows_parameters'] = Dict(parameters)
    # register paths
    paths = tilde_expand(loadpy(args.path_file))
    sys.modules['seisflows_paths'] = Dict(paths)
    PAR = sys.modules['seisflows_parameters']
    PATHS = sys.modules['seisflows_paths'] 
    print(os.getcwd())
    #### backup the code / object to investigate 
    codefrom = (PATHS.SPECFEM_BIN[:-4]+'/src/cuda/compute_kernels_cuda.cu')
    codeto='obf/compute_kernels_cuda.cu'
    copyfile(codefrom,codeto) 

    execfile('zfuncfolder/zhseismo_load_plot_main.py')	
    execfile('zfuncfolder/zhmulti_signal_comp_main.py')

    print('############### start: include pngs into PPTs ##################### ')
    flag_include_vp = 1 
    flag_include_vs = 2
    flag_include_Qkappa = 2
    flag_seis_num_axis = 1

    save_parafile='obf/paraplot'
    textplot(PAR, save_parafile)
    #plt.close()
    #add_slide_ze(save_parafile,para.total_filename_pptx)
    ## the relative path and filename to save the results in pptx 
    total_filename_pptx='obf/zauto_results.pptx'
    prs = Presentation()
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    ## input title of the first slide the pptx
    title.text = "2D Inversion Results  negtative potential*b_potential"
    ## input the date and time as the subtitle
    now = datetime.datetime.now()
    subtitle.text = now.strftime("%Y-%m-%d %H:%M") 
    prs.save(total_filename_pptx)
    add_slide_ze(save_parafile,total_filename_pptx)
    ## input all parameters for result summary t the slides
    save_sig_plot_para_pickledump_fn = 'obf/sig_plot_para_pickle'
    with open(save_sig_plot_para_pickledump_fn,'rb') as handle:
        sig_plot_para = pickle.load(handle)
    save_parafile='obf/sig_plot_para_pickle'
    textplot(sig_plot_para, save_parafile)
    add_slide_ze(save_parafile,total_filename_pptx)

    add_slide_ze('obf/cost_function.png',total_filename_pptx)

    vp_matrix = sig_plot_para.iter_matrix
    iter_matrix = vp_matrix
    if flag_include_vp is 1: 
       for i in vp_matrix:
           vp_filename='obf/vp_%04d.png' % i 
           print vp_filename
           add_slide_ze(vp_filename,total_filename_pptx)

       # max filename only    
       os.chdir('obf')
       print(os.getcwd())
       maxfile=max(glob.glob("vp*.png"))
       # maxfile with relative path
       maxfilepath='obf/'+maxfile
           
       print maxfilepath
       os.chdir('..') 
       print(os.getcwd())
       add_slide_ze(maxfilepath,total_filename_pptx)
       add_slide_ze('obf/vp_true.png',total_filename_pptx)       

    if flag_include_vs is 1: 
       vs_matrix = vp_matrix
       for i in vs_matrix:
           vs_filename='output/vs_%04d.png' % i 
           print vs_filename
           add_slide_ze(vs_filename,total_filename_pptx)

       # max filename only    
       os.chdir('output')
       print(os.getcwd())
       maxfile=max(glob.glob("vs*.png"))
       # maxfile with relative path
       maxfilepath='output/'+maxfile
       
       print maxfilepath
       os.chdir('..') 
       print(os.getcwd())
       add_slide_ze(maxfilepath,total_filename_pptx)

    if flag_include_Qkappa is 1:  
       Qkappa_matrix = vp_matrix
       for i in Qkappa_matrix:
           Qkappa_filename='output/Qkappa_%04d.png' % i 
           print Qkappa_filename
           add_slide_ze(Qkappa_filename,total_filename_pptx)

       # max filename only    
       os.chdir('output')
       print(os.getcwd())
       maxfile=max(glob.glob("Qkappa*.png"))
       # maxfile with relative path
       maxfilepath='output/'+maxfile
    
       print maxfilepath
       os.chdir('..') 
       print(os.getcwd())
       add_slide_ze(maxfilepath,total_filename_pptx)

    execfile('zfuncfolder/zrseismo2ppt_main.py')	
    execfile('zfuncfolder/zrmulti_signal_comp_mainppt.py')

    print('############### end : include pngs into PPTs ##################### ')
